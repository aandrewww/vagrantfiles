# -*- mode: ruby -*-
# vi: set ft=ruby :

# # # # # # # # # # #
# TECHNOLOGY STACK:
# ------------------
# Linux (Ubuntu 14.04)
# Nginx
# MySQL
# PHP-FPM
#
# PHPMyAdmin
# NodeJS ( + bower)
# Composer
# # # # # # # # # # #


# PROJECT SETTINGS
# ------------------
PROJECT_NAME  = false # default from project name folder
PROJECT_HOST  = false # default `project_name.dev`
PROJECT_HOST_ALIAS = false # default `www.project_name.dev`

# Set a local private network IP address.
# See http://en.wikipedia.org/wiki/Private_network for explanation
# You can use the following IP ranges:
#   10.0.0.1    - 10.255.255.254
#   172.16.0.1  - 172.31.255.254
#   192.168.0.1 - 192.168.255.254
IP_ADDRESS    = false # default "10.0.0.10"

SERVER_NAME  = false # default "localserver"

VM_ARCH       = false # default 32  or VM_ARCH
VM_MEMORY     = false # default 512 or VM_MEMORY
VM_CORES      = false # default 1   or VM_CORES

# Development script any command for run `vagrant provision`
$server_script = <<SCRIPT
SCRIPT

# Check script
$check = <<SCRIPT
	git --version
	php -v
	composer --version
	echo node $(node -v)
	echo npm $(npm -v)
	echo bower $(bower -v)
SCRIPT

# General project settings for customize

project_name = PROJECT_NAME || File.basename(File.dirname(__FILE__))
project_host = PROJECT_HOST || "#{project_name}.dev"
project_host_alias = PROJECT_HOST_ALIAS || "www.#{project_name}.dev"
ip_address = IP_ADDRESS || "10.0.0.10"
server_name = SERVER_NAME || "localserver"
hostmanager_aliases = ["#{project_host}", "#{project_host_alias}"]

# Environment variables

ARCH = VM_ARCH || ENV['VM_ARCH'] || 32
MEMORY = VM_MEMORY || ENV['VM_MEMORY'] || 512
CORES = VM_CORES || ENV['VM_CORES'] || 1

# Virtual host setup
$virtual_host = <<SCRIPT
	echo "Setup virtual hosts..."
	echo 'server {
		listen   80;
		server_name #{project_host} #{project_host_alias};

		root /var/www/#{project_name}/public;
		index index.php index.html index.htm;

	    access_log  /var/www/#{project_name}/log/nginx-access.log;
	    error_log   /var/www/#{project_name}/log/nginx-error.log;

		location / {
			try_files $uri $uri/ /index.php?q=$uri&$args;
		}
		location ~* ^.+.(js|css|png|jpg|jpeg|gif|ico)$ {
			access_log        off;
			expires           max;
		}
		location ~ \.php$ {
			try_files $uri =404;
		    fastcgi_split_path_info ^(.+\.php)(/.+)$;
		    fastcgi_pass unix:/var/run/php5-fpm.sock;
		    fastcgi_index index.php;
		    include fastcgi_params;
		}

		location = /favicon.ico {
			log_not_found off;
			access_log off;
		}
		location = /robots.txt {
			allow all;
			log_not_found off;
			access_log off;
		}
		## Disable viewing .htaccess & .htpassword
		location ~ /\.ht {
			deny  all;
		}

		# phpMyAdmin
		location /phpmyadmin {
			root /usr/share/;
			index index.php index.html index.htm;
			location ~ ^/phpmyadmin/(.+\.php)$ {
				client_max_body_size 4M;
				client_body_buffer_size 128k;
				try_files $uri =404;
				root /usr/share/;
				# Point it to the fpm socket;
				fastcgi_pass unix:/var/run/php5-fpm.sock;
				fastcgi_index index.php;
				fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
				include /etc/nginx/fastcgi_params;
			}
			location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt)) {
				root /usr/share/;
			}
		}
		location /phpMyAdmin {
			rewrite ^/* /phpmyadmin last;
		}
	}' > /etc/nginx/sites-available/#{project_name}
	ln -s /etc/nginx/sites-available/#{project_name} /etc/nginx/sites-enabled/#{project_name} > /dev/null
	service nginx restart > /dev/null
SCRIPT

# Setup script
$script = <<SCRIPT
	# Update the server
	echo "Update server..."
	apt-get update -qq && apt-get upgrade -qq -y --fix-missing > /dev/null
	# Install basic tools
	echo "Install basic tools..."
	apt-get install -qq -y build-essential binutils-doc git > /dev/null

	# Install Nginx
	echo "Install Nginx..."
	apt-get install -qq -y nginx > /dev/null

	# Install PHP-FPM
	echo "Install PHP-FPM and tools..."
	apt-get install -qq -y php5-fpm php5-cgi php5-cli php5-common php5-gd php5-mysql php5-curl php5-intl php5-mcrypt php5-tidy php5-readline php5-xdebug php-apc php5-memcached php5-imap php5-sqlite php5-xsl php-pear > /dev/null


	# Setup project dir
	mkdir -p /var/www/#{project_name}/log
	chown www-data:www-data -R /var/www/#{project_name}

	# Install MySQL
	echo "Install MySQL server..."
	echo mysql-server     mysql-server/root_password        password local | debconf-set-selections
	echo mysql-server     mysql-server/root_password_again  password local | debconf-set-selections
	apt-get -yq install mysql-client mysql-server > /dev/null
	# Allow MySQL root access from any host
	sed -i 's/^bind-address[[:blank:]]*=[[:blank:]]*127.0.0.1$/bind-address = 0.0.0.0/g' /etc/mysql/my.cnf
	echo "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'local' WITH GRANT OPTION" | mysql -u root --password=local
	echo "GRANT PROXY ON ''@'' TO 'root'@'%' WITH GRANT OPTION" | mysql -u root --password=local

	# Install phpmyadmin
	echo "Install PHPMyAdmin..."
	echo phpmyadmin       phpmyadmin/reconfigure-webserver  text     apache2     | debconf-set-selections
	echo phpmyadmin       phpmyadmin/dbconfig-install       boolean  true        | debconf-set-selections
	echo phpmyadmin       phpmyadmin/app-password-confirm   password local       | debconf-set-selections
	echo phpmyadmin       phpmyadmin/mysql/admin-pass       password local       | debconf-set-selections
	echo phpmyadmin       phpmyadmin/password-confirm       password local       | debconf-set-selections
	echo phpmyadmin       phpmyadmin/setup-password         password local       | debconf-set-selections
	echo phpmyadmin       phpmyadmin/mysql/app-pass         password local       | debconf-set-selections
	apt-get -yq install phpmyadmin > /dev/null
	# Restart Services
	service mysql restart > /dev/null

	# Install NodeJS
	echo "Install NodeJS..."
	curl -sL https://deb.nodesource.com/setup | bash - > /dev/null
	apt-get install -yq nodejs > /dev/null
	# Install Bower
	echo "Install Bower..."
	npm install -gq bower > /dev/null
	# Install composer
	echo "Install Composer..."
	curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/local/bin/composer > /dev/null
	sudo -u vagrant -H composer --no-ansi -q global require "fxp/composer-asset-plugin:1.0.0-beta3"   # Install NPM/Bower Dependency Manager for Composer
	sudo -u vagrant -H composer --no-ansi -q global require fabpot/php-cs-fixer @stable               # Install PHP Coding Standards Fixer
	sudo -u vagrant -H echo export PATH=$PATH:/home/vagrant/.composer/vendor/bin >> .bashrc

	# Configure VM user
	adduser vagrant www-data
SCRIPT

# VAGRANT CONFIGURATION
# -----------------------
Vagrant.configure("2") do |config|

	# Define VM box to use
	config.vm.box = "ubuntu/trusty#{ARCH}"
	config.vm.box_version = ">= 14.04"

	# Set share folder
	config.vm.synced_folder "./" , "/var/www/#{project_name}", :mount_options => ["dmode=777", "fmode=666"]

	# Provider-specific configuration so you can fine-tune VirtualBox for Vagrant.
	# These expose provider-specific options.
	config.vm.provider :virtualbox do |vm|
		# Use VBoxManage to customize the VM. For example to change memory:
		vm.customize ["modifyvm", :id, "--memory", MEMORY.to_i]
		vm.customize ["modifyvm", :id, "--cpus", CORES.to_i]

		if CORES.to_i > 1
			vm.customize ["modifyvm", :id, "--ioapic", "on"]
		end
	end

	# Use hostonly network with a static IP Address and enable
	# hostmanager so we can have a custom domain for the server
	# by modifying the host machines hosts file
	config.hostmanager.enabled = true
	config.hostmanager.manage_host = true
	config.vm.define project_name do |node|
		node.vm.hostname = server_name
		node.vm.network :private_network, ip: ip_address
		node.hostmanager.aliases = hostmanager_aliases
	end
	config.vm.provision :hostmanager

	config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

	if Dir.glob("#{File.dirname(__FILE__)}/.vagrant/machines/#{project_name}/*/id").empty?
		config.vm.provision :shell, :inline => $script
	end

	config.vm.provision :shell, :inline => $virtual_host
	config.vm.provision :shell, :inline => $server_script
	config.vm.provision :shell, :inline => $check

end
